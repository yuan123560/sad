{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///D:/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20%282%29/src/app/api/qanything/stream-direct/route.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { QAnythingChatRequest } from '@/types';\n\n// 获取或创建知识库\nasync function getOrCreateKnowledgeBase(apiKey: string): Promise<string> {\n  try {\n    // 首先尝试获取现有知识库列表\n    const listResponse = await fetch('https://openapi.youdao.com/q_anything/api/kb_list', {\n      method: 'GET',\n      headers: {\n        'Authorization': apiKey,\n      },\n    });\n\n    if (listResponse.ok) {\n      const listData = await listResponse.json();\n      if (listData.errorCode == 0 && listData.result && listData.result.length > 0) {\n        // 使用第一个知识库\n        const kbId = listData.result[0].kbId;\n        console.log('Using existing knowledge base:', kbId);\n        return kbId;\n      }\n    }\n\n    // 如果没有知识库，创建一个新的\n    console.log('Creating new knowledge base...');\n    const createResponse = await fetch('https://openapi.youdao.com/q_anything/api/create_kb', {\n      method: 'POST',\n      headers: {\n        'Authorization': apiKey,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        kbName: 'Course Showcase AI助手',\n      }),\n    });\n\n    if (!createResponse.ok) {\n      const errorText = await createResponse.text();\n      throw new Error(`Failed to create knowledge base: ${createResponse.status} - ${errorText}`);\n    }\n\n    const createData = await createResponse.json();\n    if (createData.errorCode != 0) {\n      throw new Error(`Knowledge base creation failed: ${createData.msg}`);\n    }\n\n    const newKbId = createData.result.kbId;\n    console.log('Created new knowledge base:', newKbId);\n    console.log('Please add FAQs through QAnything platform to enable Q&A functionality.');\n\n    return newKbId;\n  } catch (error) {\n    console.error('Error managing knowledge base:', error);\n    throw error;\n  }\n}\n\n// POST /api/qanything/stream-direct - 直接转发流式聊天（最小延迟）\nexport async function POST(request: NextRequest) {\n  try {\n    const body: QAnythingChatRequest = await request.json();\n\n    // 验证API密钥\n    const apiKey = process.env.QANYTHING_API_KEY;\n    if (!apiKey) {\n      return new Response(\n        JSON.stringify({ success: false, error: 'QAnything API Key not configured' }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n\n    // 验证请求参数\n    if (!body.question || body.question.trim().length === 0) {\n      return new Response(\n        JSON.stringify({ success: false, error: '问题不能为空' }),\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n\n    // 准备请求数据 - 根据QAnything API文档格式\n    const requestData = {\n      question: body.question,\n      kbIds: body.kbIds && body.kbIds.length > 0 ? body.kbIds : [], // 确保是数组\n      prompt: body.prompt || '',\n      history: body.history || [],\n      model: body.model || 'QAnything 4o mini',\n      maxToken: body.maxToken || 1024, // 保持数字格式\n      hybridSearch: body.hybridSearch || false, // 保持布尔格式\n      networking: body.networking !== undefined ? body.networking : false, // 默认关闭联网\n      sourceNeeded: body.sourceNeeded !== undefined ? body.sourceNeeded : true, // 保持布尔格式\n    };\n\n    // 创建流式响应 - 直接转发模式\n    const stream = new ReadableStream({\n      async start(controller) {\n        try {\n          // 确定要使用的知识库ID\n          let finalKbIds = requestData.kbIds;\n          \n          // 如果前端没有指定知识库，则获取或创建一个默认知识库\n          if (!finalKbIds || finalKbIds.length === 0) {\n            const defaultKbId = await getOrCreateKnowledgeBase(apiKey);\n            finalKbIds = [defaultKbId];\n          }\n\n          // 验证知识库ID格式（QAnything知识库ID通常以KB开头）\n          const validKbIds = finalKbIds.filter(id => id && typeof id === 'string' && id.startsWith('KB'));\n          if (validKbIds.length === 0) {\n            throw new Error('无效的知识库ID格式');\n          }\n          finalKbIds = validKbIds;\n\n          // 准备请求数据，使用正确的数字和布尔类型格式\n          const finalRequestData = {\n            question: requestData.question,\n            kbIds: finalKbIds, // 使用前端指定的知识库ID或默认知识库ID\n            prompt: requestData.prompt || '',\n            history: requestData.history || [], // 必需参数：对话历史，确保是简单数组\n            model: requestData.model || 'QAnything 4o mini',\n            maxToken: requestData.maxToken || 1024, // 数字类型\n            hybridSearch: requestData.hybridSearch || false, // 布尔类型\n            networking: requestData.networking !== undefined ? requestData.networking : false, // 布尔类型，默认false\n            sourceNeeded: requestData.sourceNeeded !== undefined ? requestData.sourceNeeded : true, // 布尔类型\n          };\n\n          console.log('QAnything API Direct Request:', JSON.stringify(finalRequestData, null, 2));\n\n          // 直接调用QAnything API，不进行重试（减少延迟）\n          const response = await fetch('https://openapi.youdao.com/q_anything/api/chat_stream', {\n            method: 'POST',\n            headers: {\n              'Authorization': apiKey,\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(finalRequestData),\n          });\n\n          if (!response.ok) {\n            let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n            \n            try {\n              const errorText = await response.text();\n              if (errorText) {\n                console.error('QAnything API Error Response:', errorText);\n                \n                // 尝试解析错误详情\n                try {\n                  const errorData = JSON.parse(errorText);\n                  if (errorData.errorCode === '303' || errorData.errorCode === 303) {\n                    errorMessage = 'QAnything服务器暂时不可用，请稍后重试';\n                  } else if (errorData.errorCode === '406' || errorData.errorCode === 406) {\n                    errorMessage = 'QAnything API参数错误，请检查知识库设置';\n                  } else if (errorData.msg) {\n                    errorMessage = `QAnything API错误：${errorData.msg}`;\n                  }\n                } catch {\n                  // 如果不是JSON格式，使用原始错误文本\n                  errorMessage += ` - ${errorText}`;\n                }\n              }\n            } catch (e) {\n              console.error('Failed to read error response:', e);\n            }\n            \n            // 发送友好的错误消息给客户端\n            const errorData = {\n              errorCode: -1,\n              msg: errorMessage,\n              result: {\n                question: finalRequestData.question,\n                response: `抱歉，${errorMessage}`,\n                history: finalRequestData.history || [],\n              },\n            };\n            \n            controller.enqueue(\n              new TextEncoder().encode(`data: ${JSON.stringify(errorData)}\\n\\n`)\n            );\n            controller.close();\n            return;\n          }\n\n          // 直接转发原始字节流 - 最小延迟模式\n          const reader = response.body?.getReader();\n          if (!reader) {\n            throw new Error('无法读取响应流');\n          }\n\n          try {\n            while (true) {\n              const { done, value } = await reader.read();\n\n              if (done) break;\n\n              // 直接转发原始字节，不进行任何处理\n              // 这样可以获得最佳的实时性能\n              controller.enqueue(value);\n            }\n          } finally {\n            reader.releaseLock();\n          }\n\n          controller.close();\n        } catch (error) {\n          console.error('Stream error:', error);\n          \n          // 发送错误信息\n          const errorData = {\n            errorCode: -1,\n            msg: error instanceof Error ? error.message : 'Unknown error',\n            result: {\n              question: body.question,\n              response: '抱歉，处理您的请求时出现了错误。',\n              history: body.history || [],\n            },\n          };\n          \n          controller.enqueue(\n            new TextEncoder().encode(`data: ${JSON.stringify(errorData)}\\n\\n`)\n          );\n          controller.close();\n        }\n      },\n    });\n\n    return new Response(stream, {\n      headers: {\n        'Content-Type': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        'Connection': 'keep-alive',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'POST',\n        'Access-Control-Allow-Headers': 'Content-Type',\n      },\n    });\n\n  } catch (error) {\n    console.error('QAnything Stream Direct API Error:', error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: 'Internal server error',\n      }),\n      { \n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}