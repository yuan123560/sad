{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///D:/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20%282%29/src/lib/api.ts"],"sourcesContent":["import { ApiResponse, AppError } from '@/types';\n\n// API配置\nconst API_CONFIG = {\n  timeout: 30000, // 30秒超时\n  retries: 3, // 重试次数\n};\n\n// 自定义错误类\nexport class ApiError extends Error {\n  constructor(\n    public code: string,\n    message: string,\n    public status?: number,\n    public details?: unknown\n  ) {\n    super(message);\n    this.name = 'ApiError';\n  }\n}\n\n// 请求配置接口\ninterface RequestConfig extends RequestInit {\n  timeout?: number;\n  retries?: number;\n  baseURL?: string;\n}\n\n// 创建带超时的fetch\nfunction fetchWithTimeout(\n  url: string,\n  options: RequestConfig = {}\n): Promise<Response> {\n  const { timeout = API_CONFIG.timeout, ...fetchOptions } = options;\n\n  return new Promise((resolve, reject) => {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => {\n      controller.abort();\n      reject(new ApiError('TIMEOUT', `请求超时 (${timeout}ms)`));\n    }, timeout);\n\n    fetch(url, {\n      ...fetchOptions,\n      signal: controller.signal,\n    })\n      .then(resolve)\n      .catch(reject)\n      .finally(() => clearTimeout(timeoutId));\n  });\n}\n\n// 通用API请求函数\nexport async function apiRequest<T = any>(\n  url: string,\n  config: RequestConfig = {}\n): Promise<ApiResponse<T>> {\n  const {\n    retries = API_CONFIG.retries,\n    baseURL = '',\n    headers = {},\n    ...options\n  } = config;\n\n  const fullUrl = baseURL ? `${baseURL}${url}` : url;\n  const requestHeaders = {\n    'Content-Type': 'application/json',\n    ...headers,\n  };\n\n  let lastError: Error = new Error('未知错误');\n\n  for (let attempt = 0; attempt <= retries; attempt++) {\n    try {\n      const response = await fetchWithTimeout(fullUrl, {\n        ...options,\n        headers: requestHeaders,\n      });\n\n      // 检查HTTP状态码\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n        \n        try {\n          const errorData = JSON.parse(errorText);\n          errorMessage = errorData.message || errorData.error || errorMessage;\n        } catch {\n          // 如果不是JSON，使用原始错误文本\n          if (errorText) {\n            errorMessage = errorText;\n          }\n        }\n\n        throw new ApiError(\n          `HTTP_${response.status}`,\n          errorMessage,\n          response.status\n        );\n      }\n\n      // 解析响应\n      const data = await response.json();\n      \n      return {\n        success: true,\n        data,\n      };\n    } catch (error) {\n      lastError = error as Error;\n      \n      // 如果是最后一次尝试，抛出错误\n      if (attempt === retries) {\n        break;\n      }\n      \n      // 等待一段时间后重试\n      await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)));\n    }\n  }\n\n  // 处理最终错误\n  if (lastError instanceof ApiError) {\n    return {\n      success: false,\n      error: lastError.message,\n    };\n  }\n\n  return {\n    success: false,\n    error: lastError.message || '未知错误',\n  };\n}\n\n// GET请求\nexport function get<T = any>(\n  url: string,\n  config?: RequestConfig\n): Promise<ApiResponse<T>> {\n  return apiRequest<T>(url, { ...config, method: 'GET' });\n}\n\n// POST请求\nexport function post<T = any>(\n  url: string,\n  data?: any,\n  config?: RequestConfig\n): Promise<ApiResponse<T>> {\n  return apiRequest<T>(url, {\n    ...config,\n    method: 'POST',\n    body: data ? JSON.stringify(data) : undefined,\n  });\n}\n\n// PUT请求\nexport function put<T = any>(\n  url: string,\n  data?: any,\n  config?: RequestConfig\n): Promise<ApiResponse<T>> {\n  return apiRequest<T>(url, {\n    ...config,\n    method: 'PUT',\n    body: data ? JSON.stringify(data) : undefined,\n  });\n}\n\n// DELETE请求\nexport function del<T = any>(\n  url: string,\n  config?: RequestConfig\n): Promise<ApiResponse<T>> {\n  return apiRequest<T>(url, { ...config, method: 'DELETE' });\n}\n\n// 流式请求处理\nexport async function streamRequest(\n  url: string,\n  config: RequestConfig = {},\n  onChunk: (chunk: string) => void\n): Promise<void> {\n  const { headers = {}, ...options } = config;\n  \n  const response = await fetchWithTimeout(url, {\n    ...options,\n    headers: {\n      'Accept': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      ...headers,\n    },\n  });\n\n  if (!response.ok) {\n    throw new ApiError(\n      `HTTP_${response.status}`,\n      `HTTP ${response.status}: ${response.statusText}`,\n      response.status\n    );\n  }\n\n  const reader = response.body?.getReader();\n  if (!reader) {\n    throw new ApiError('STREAM_ERROR', '无法读取响应流');\n  }\n\n  const decoder = new TextDecoder();\n\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      \n      if (done) break;\n      \n      const chunk = decoder.decode(value, { stream: true });\n      onChunk(chunk);\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\n// 错误处理工具\nexport function handleApiError(error: any): AppError {\n  if (error instanceof ApiError) {\n    return {\n      code: error.code,\n      message: error.message,\n      details: error.details,\n    };\n  }\n\n  return {\n    code: 'UNKNOWN_ERROR',\n    message: error?.message || '发生未知错误',\n    details: error,\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file:///D:/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20%282%29/src/lib/constants.ts"],"sourcesContent":["// API端点\nexport const API_ENDPOINTS = {\n  // WakaTime API\n  WAKATIME: {\n    BASE_URL: 'https://api.wakatime.com/api/v1',\n    ALL_TIME: '/users/current/all_time_since_today',\n    STATS: '/users/current/stats',\n    SUMMARIES: '/users/current/summaries',\n    STATUS_BAR: '/users/current/status_bar/today',\n  },\n  \n  // QAnything API\n  QANYTHING: {\n    BASE_URL: process.env.QANYTHING_API_BASE_URL || 'https://openapi.youdao.com/q_anything/api',\n    CHAT_STREAM: '/chat_stream',\n    BOT_CHAT_STREAM: '/bot/chat_stream',\n  },\n} as const;\n\n// 响应消息\nexport const RESPONSE_MESSAGES = {\n  SUCCESS: '操作成功',\n  ERROR: '操作失败',\n  LOADING: '加载中...',\n  NETWORK_ERROR: '网络连接失败，请检查网络设置',\n  TIMEOUT_ERROR: '请求超时，请稍后重试',\n  UNAUTHORIZED: '未授权访问，请检查API密钥',\n  FORBIDDEN: '访问被拒绝',\n  NOT_FOUND: '请求的资源不存在',\n  SERVER_ERROR: '服务器内部错误',\n  VALIDATION_ERROR: '数据验证失败',\n} as const;\n\n// QAnything模型配置\nexport const QANYTHING_MODELS = {\n  'QAnything 4o mini': {\n    name: 'QAnything 4o mini',\n    maxToken: { min: 512, max: 1024, default: 512 },\n    description: '轻量级模型，响应速度快',\n  },\n  'QAnything 4o': {\n    name: 'QAnything 4o',\n    maxToken: { min: 1024, max: 4096, default: 1024 },\n    description: '标准模型，平衡性能与质量',\n  },\n  'deepseek-pro': {\n    name: 'deepseek-pro',\n    maxToken: { min: 1024, max: 4096, default: 1024 },\n    description: '专业模型，高质量回答',\n  },\n  'deepseek-lite': {\n    name: 'deepseek-lite',\n    maxToken: { min: 1024, max: 4096, default: 1024 },\n    description: '轻量级专业模型',\n  },\n  'deepseek-chat': {\n    name: 'deepseek-chat',\n    maxToken: { min: 1024, max: 4096, default: 1024 },\n    description: '对话优化模型',\n  },\n} as const;\n\n// 默认配置\nexport const DEFAULT_CONFIG = {\n  // QAnything默认配置\n  QANYTHING: {\n    model: 'QAnything 4o mini',\n    maxToken: 1024,\n    hybridSearch: false,\n    networking: false, // 默认关闭联网，与示例保持一致\n    sourceNeeded: true,\n    kbIds: [], // 默认知识库ID，可以在环境变量中配置\n  },\n  \n  // WakaTime默认配置\n  WAKATIME: {\n    timeout: 15, // 15分钟超时\n    range: 'Today',\n  },\n  \n  // UI配置\n  UI: {\n    toastDuration: 5000, // 5秒\n    animationDuration: 300, // 300ms\n    debounceDelay: 500, // 500ms防抖\n  },\n} as const;\n\n// 课程练习分类\nexport const EXERCISE_CATEGORIES = {\n  HTML: {\n    name: 'HTML',\n    color: '#E34F26',\n    description: 'HTML基础练习',\n  },\n  CSS: {\n    name: 'CSS',\n    color: '#1572B6',\n    description: 'CSS样式练习',\n  },\n  JAVASCRIPT: {\n    name: 'JavaScript',\n    color: '#F7DF1E',\n    description: 'JavaScript编程练习',\n  },\n  REACT: {\n    name: 'React',\n    color: '#61DAFB',\n    description: 'React框架练习',\n  },\n  NEXTJS: {\n    name: 'Next.js',\n    color: '#000000',\n    description: 'Next.js全栈练习',\n  },\n  PROJECT: {\n    name: '综合项目',\n    color: '#8B5CF6',\n    description: '综合性项目练习',\n  },\n} as const;\n\n// 本地存储键名\nexport const STORAGE_KEYS = {\n  CHAT_HISTORY: 'course_showcase_chat_history',\n  USER_PREFERENCES: 'course_showcase_user_preferences',\n  WAKATIME_CACHE: 'course_showcase_wakatime_cache',\n} as const;\n\n// 正则表达式\nexport const REGEX_PATTERNS = {\n  EMAIL: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  URL: /^https?:\\/\\/.+/,\n  API_KEY: /^[a-zA-Z0-9_-]+$/,\n} as const;\n\n// 错误代码\nexport const ERROR_CODES = {\n  // 网络错误\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\n  \n  // API错误\n  API_KEY_INVALID: 'API_KEY_INVALID',\n  API_RATE_LIMIT: 'API_RATE_LIMIT',\n  API_QUOTA_EXCEEDED: 'API_QUOTA_EXCEEDED',\n  \n  // 数据错误\n  VALIDATION_ERROR: 'VALIDATION_ERROR',\n  DATA_NOT_FOUND: 'DATA_NOT_FOUND',\n  \n  // 系统错误\n  UNKNOWN_ERROR: 'UNKNOWN_ERROR',\n  SERVER_ERROR: 'SERVER_ERROR',\n} as const;\n"],"names":[],"mappings":"AAAA,QAAQ;;;;;;;;;;;AACD,MAAM,gBAAgB;IAC3B,eAAe;IACf,UAAU;QACR,UAAU;QACV,UAAU;QACV,OAAO;QACP,WAAW;QACX,YAAY;IACd;IAEA,gBAAgB;IAChB,WAAW;QACT,UAAU,QAAQ,GAAG,CAAC,sBAAsB,IAAI;QAChD,aAAa;QACb,iBAAiB;IACnB;AACF;AAGO,MAAM,oBAAoB;IAC/B,SAAS;IACT,OAAO;IACP,SAAS;IACT,eAAe;IACf,eAAe;IACf,cAAc;IACd,WAAW;IACX,WAAW;IACX,cAAc;IACd,kBAAkB;AACpB;AAGO,MAAM,mBAAmB;IAC9B,qBAAqB;QACnB,MAAM;QACN,UAAU;YAAE,KAAK;YAAK,KAAK;YAAM,SAAS;QAAI;QAC9C,aAAa;IACf;IACA,gBAAgB;QACd,MAAM;QACN,UAAU;YAAE,KAAK;YAAM,KAAK;YAAM,SAAS;QAAK;QAChD,aAAa;IACf;IACA,gBAAgB;QACd,MAAM;QACN,UAAU;YAAE,KAAK;YAAM,KAAK;YAAM,SAAS;QAAK;QAChD,aAAa;IACf;IACA,iBAAiB;QACf,MAAM;QACN,UAAU;YAAE,KAAK;YAAM,KAAK;YAAM,SAAS;QAAK;QAChD,aAAa;IACf;IACA,iBAAiB;QACf,MAAM;QACN,UAAU;YAAE,KAAK;YAAM,KAAK;YAAM,SAAS;QAAK;QAChD,aAAa;IACf;AACF;AAGO,MAAM,iBAAiB;IAC5B,gBAAgB;IAChB,WAAW;QACT,OAAO;QACP,UAAU;QACV,cAAc;QACd,YAAY;QACZ,cAAc;QACd,OAAO,EAAE;IACX;IAEA,eAAe;IACf,UAAU;QACR,SAAS;QACT,OAAO;IACT;IAEA,OAAO;IACP,IAAI;QACF,eAAe;QACf,mBAAmB;QACnB,eAAe;IACjB;AACF;AAGO,MAAM,sBAAsB;IACjC,MAAM;QACJ,MAAM;QACN,OAAO;QACP,aAAa;IACf;IACA,KAAK;QACH,MAAM;QACN,OAAO;QACP,aAAa;IACf;IACA,YAAY;QACV,MAAM;QACN,OAAO;QACP,aAAa;IACf;IACA,OAAO;QACL,MAAM;QACN,OAAO;QACP,aAAa;IACf;IACA,QAAQ;QACN,MAAM;QACN,OAAO;QACP,aAAa;IACf;IACA,SAAS;QACP,MAAM;QACN,OAAO;QACP,aAAa;IACf;AACF;AAGO,MAAM,eAAe;IAC1B,cAAc;IACd,kBAAkB;IAClB,gBAAgB;AAClB;AAGO,MAAM,iBAAiB;IAC5B,OAAO;IACP,KAAK;IACL,SAAS;AACX;AAGO,MAAM,cAAc;IACzB,OAAO;IACP,eAAe;IACf,eAAe;IAEf,QAAQ;IACR,iBAAiB;IACjB,gBAAgB;IAChB,oBAAoB;IAEpB,OAAO;IACP,kBAAkB;IAClB,gBAAgB;IAEhB,OAAO;IACP,eAAe;IACf,cAAc;AAChB","debugId":null}},
    {"offset": {"line": 404, "column": 0}, "map": {"version":3,"sources":["file:///D:/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20%282%29/src/services/wakatime.ts"],"sourcesContent":["import { get } from '@/lib/api';\nimport { API_ENDPOINTS } from '@/lib/constants';\nimport { WakaTimeStats, WakaTimeSummary, ApiResponse } from '@/types';\n\n// WakaTime API服务类\nexport class WakaTimeService {\n  private apiKey: string;\n  private baseURL: string;\n\n  constructor() {\n    this.apiKey = process.env.WAKATIME_API_KEY || '';\n    console.log('WakaTime API Key loaded:', !!this.apiKey); // 添加此行验证\n    this.baseURL = API_ENDPOINTS.WAKATIME.BASE_URL;\n    \n    if (!this.apiKey) {\n      console.warn('WakaTime API Key not found in environment variables');\n    }\n  }\n\n  // 获取认证头\n  private getAuthHeaders() {\n    if (!this.apiKey) {\n      throw new Error('WakaTime API Key is required');\n    }\n\n    // 使用HTTP Basic Auth，API Key需要base64编码\n    const encodedKey = Buffer.from(this.apiKey).toString('base64');\n    \n    return {\n      'Authorization': `Basic ${encodedKey}`,\n    };\n  }\n\n  // 获取总编码时长（从账户创建至今）\n  async getAllTimeStats(): Promise<ApiResponse<WakaTimeStats['data']>> {\n    try {\n      const response = await get<WakaTimeStats>(\n        API_ENDPOINTS.WAKATIME.ALL_TIME,\n        {\n          baseURL: this.baseURL,\n          headers: this.getAuthHeaders(),\n        }\n      );\n\n      if (response.success && response.data) {\n        return {\n          success: true,\n          data: response.data.data,\n        };\n      }\n\n      return {\n        success: false,\n        error: response.error || 'Failed to fetch WakaTime stats',\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `WakaTime API Error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      };\n    }\n  }\n\n  // 获取指定时间范围的统计数据\n  async getStats(range: string = 'last_7_days'): Promise<ApiResponse<unknown>> {\n    try {\n      const response = await get(\n        `${API_ENDPOINTS.WAKATIME.STATS}/${range}`,\n        {\n          baseURL: this.baseURL,\n          headers: this.getAuthHeaders(),\n        }\n      );\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: `WakaTime Stats API Error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      };\n    }\n  }\n\n  // 获取今日编码活动摘要\n  async getTodaySummary(): Promise<ApiResponse<WakaTimeSummary>> {\n    try {\n      const response = await get<{ data: WakaTimeSummary }>(\n        API_ENDPOINTS.WAKATIME.STATUS_BAR,\n        {\n          baseURL: this.baseURL,\n          headers: this.getAuthHeaders(),\n        }\n      );\n\n      if (response.success && response.data) {\n        return {\n          success: true,\n          data: response.data.data,\n        };\n      }\n\n      return {\n        success: false,\n        error: response.error || 'Failed to fetch today summary',\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `WakaTime Summary API Error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      };\n    }\n  }\n\n  // 获取指定日期范围的摘要数据\n  async getSummaries(\n    startDate: string,\n    endDate: string,\n    project?: string\n  ): Promise<ApiResponse<{ data: WakaTimeSummary[] }>> {\n    try {\n      const params = new URLSearchParams({\n        start: startDate,\n        end: endDate,\n      });\n\n      if (project) {\n        params.append('project', project);\n      }\n\n      const response = await get<{ data: WakaTimeSummary[] }>(\n        `${API_ENDPOINTS.WAKATIME.SUMMARIES}?${params.toString()}`,\n        {\n          baseURL: this.baseURL,\n          headers: this.getAuthHeaders(),\n        }\n      );\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: `WakaTime Summaries API Error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      };\n    }\n  }\n\n  // 检查API连接状态\n  async checkConnection(): Promise<ApiResponse<boolean>> {\n    try {\n      const response = await this.getAllTimeStats();\n      return {\n        success: response.success,\n        data: response.success,\n        error: response.error,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        data: false,\n        error: `Connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      };\n    }\n  }\n}\n\n// 创建单例实例\nexport const wakaTimeService = new WakaTimeService();\n\n// 客户端API调用函数（使用内部API路由）\nexport async function getWakaTimeAllTime() {\n  try {\n    const response = await fetch('/api/wakatime?type=all_time');\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: `Failed to fetch WakaTime data: ${error instanceof Error ? error.message : 'Unknown error'}`,\n    };\n  }\n}\n\nexport async function getWakaTimeTodaySummary() {\n  try {\n    const response = await fetch('/api/wakatime?type=today');\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: `Failed to fetch WakaTime today summary: ${error instanceof Error ? error.message : 'Unknown error'}`,\n    };\n  }\n}\n\nexport async function getWakaTimeStats(range: string = 'last_7_days') {\n  try {\n    const response = await fetch(`/api/wakatime?type=stats&range=${range}`);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: `Failed to fetch WakaTime stats: ${error instanceof Error ? error.message : 'Unknown error'}`,\n    };\n  }\n}\n\nexport async function checkWakaTimeConnection() {\n  try {\n    const response = await fetch('/api/wakatime?type=check');\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: `Failed to check WakaTime connection: ${error instanceof Error ? error.message : 'Unknown error'}`,\n    };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 592, "column": 0}, "map": {"version":3,"sources":["file:///D:/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20%282%29/src/app/api/wakatime/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { wakaTimeService } from '@/services/wakatime';\n\n// GET /api/wakatime - 获取WakaTime统计数据\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const type = searchParams.get('type') || 'all_time';\n    const range = searchParams.get('range') || 'last_7_days';\n\n    let response;\n\n    switch (type) {\n      case 'all_time':\n        response = await wakaTimeService.getAllTimeStats();\n        break;\n      case 'today':\n        response = await wakaTimeService.getTodaySummary();\n        break;\n      case 'stats':\n        response = await wakaTimeService.getStats(range);\n        break;\n      case 'check':\n        response = await wakaTimeService.checkConnection();\n        break;\n      default:\n        return NextResponse.json(\n          { success: false, error: 'Invalid type parameter' },\n          { status: 400 }\n        );\n    }\n\n    if (response.success) {\n      return NextResponse.json(response);\n    } else {\n      return NextResponse.json(\n        response,\n        { status: 500 }\n      );\n    }\n  } catch (error) {\n    console.error('WakaTime API Error:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Internal server error',\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,OAAO,aAAa,GAAG,CAAC,WAAW;QACzC,MAAM,QAAQ,aAAa,GAAG,CAAC,YAAY;QAE3C,IAAI;QAEJ,OAAQ;YACN,KAAK;gBACH,WAAW,MAAM,6HAAA,CAAA,kBAAe,CAAC,eAAe;gBAChD;YACF,KAAK;gBACH,WAAW,MAAM,6HAAA,CAAA,kBAAe,CAAC,eAAe;gBAChD;YACF,KAAK;gBACH,WAAW,MAAM,6HAAA,CAAA,kBAAe,CAAC,QAAQ,CAAC;gBAC1C;YACF,KAAK;gBACH,WAAW,MAAM,6HAAA,CAAA,kBAAe,CAAC,eAAe;gBAChD;YACF;gBACE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,SAAS;oBAAO,OAAO;gBAAyB,GAClD;oBAAE,QAAQ;gBAAI;QAEpB;QAEA,IAAI,SAAS,OAAO,EAAE;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAC3B,OAAO;YACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB,UACA;gBAAE,QAAQ;YAAI;QAElB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;QACT,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}